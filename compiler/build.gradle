plugins {
    id('java')
    id('maven-publish')
    id('signing')
}

group = 'io.github.jbock-java'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = '11'
    targetCompatibility = '11'
    options.compilerArgs << '--release'
    options.compilerArgs << '11'
}

repositories {
    mavenCentral()
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(GenerateModuleMetadata) {
    enabled = true
}

dependencies {
    def jbock = project(':jbock')
    def dapper = 'io.github.jbock-java:dapper:1.2.1'
    def javapoet = 'io.github.jbock-java:javapoet:1.15'
    implementation(javapoet)
    implementation('io.github.jbock-java:auto-common:1.2.3')
    implementation(jbock)
    implementation(dapper)
    annotationProcessor('io.github.jbock-java:dapper-compiler:1.2.1')
    testImplementation('io.github.jbock-java:compile-testing:0.19.12')
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation('org.mockito:mockito-core:3.12.4')
}

jar {
    manifest {
        attributes(
                'Implementation-Version': project.properties['version']
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events('failed')
    }
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

artifacts {
    archives(javadocJar, sourcesJar)
}

// https://central.sonatype.org/pages/gradle.html
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jbock-compiler'

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'jbock-compiler'
                packaging = 'jar'
                description = 'jbock annotation processor'
                url = 'https://github.com/jbock-java/jbock'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'Various'
                        name = 'Various'
                        email = 'jbock-java@gmx.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jbock-java/jbock.git'
                    developerConnection = 'scm:git:https://github.com/jbock-java/jbock.git'
                    url = 'https://github.com/jbock-java/jbock'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv('OSS_USER')
                password = System.getenv('OSS_PASS')
            }
        }
    }
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
