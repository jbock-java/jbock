plugins {
	id("java-library")
	id("maven-publish")
	id("signing")
}

group = "io.github.jbock-java"

compileJava {
	options.encoding = "UTF-8"
	sourceCompatibility = "11"
	targetCompatibility = "11"
}

javadoc {
	options.encoding = "UTF-8"
}

repositories {
	mavenCentral()
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

tasks.withType(GenerateModuleMetadata) {
	enabled = true
}

dependencies {
	api("io.github.jbock-java:either:1.5.2")
	testImplementation platform("org.junit:junit-bom:5.12.2")
	testImplementation("org.junit.jupiter:junit-jupiter")
	testImplementation("org.mockito:mockito-core:5.16.1")
}

jar {
	manifest {
		attributes(
			"Implementation-Version": project.properties["version"]
		)
	}
}

test {
	useJUnitPlatform()
}

tasks.register("javadocJar", Jar) {
	from javadoc
	archiveClassifier.set("javadoc")
}

tasks.register("sourcesJar", Jar) {
	from sourceSets.main.allJava
	archiveClassifier.set("sources")
}

artifacts {
	archives(javadocJar, sourcesJar)
}

// https://central.sonatype.org/pages/gradle.html
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "jbock"
			from components.java

			artifact sourcesJar
			artifact javadocJar

			pom {
				name = "jbock"
				packaging = "jar"
				description = "jbock annotations and utils"
				url = "https://github.com/jbock-java/jbock"

				licenses {
					license {
						name = "MIT License"
						url = "https://opensource.org/licenses/MIT"
					}
				}
				developers {
					developer {
						id = "Various"
						name = "Various"
						email = "jbock-java@gmx.de"
					}
				}
				scm {
					connection = "scm:git:https://github.com/jbock-java/jbock.git"
					developerConnection = "scm:git:https://github.com/jbock-java/jbock.git"
					url = "https://github.com/jbock-java/jbock"
				}
			}
		}
	}
	repositories {
		maven {
			url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials {
				username = System.getenv("OSS_USER")
				password = System.getenv("OSS_PASS")
			}
		}
	}
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
	def signingKey = findProperty("signingKey")
	def signingPassword = findProperty("signingPassword")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.mavenJava
}
